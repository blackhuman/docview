/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma } from "@prisma/client";
import { type GetNextArgs, type QueryOptions, type InfiniteQueryOptions, type MutationOptions, type PickEnumerable } from '@zenstackhq/swr/runtime';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
import * as request from '@zenstackhq/swr/runtime';

export function useCreateJob(options?: MutationOptions<Prisma.JobGetPayload<Prisma.JobCreateArgs> | undefined, unknown, Prisma.JobCreateArgs>) {
    const mutation = request.useModelMutation('Job', 'POST', 'create', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobCreateArgs>(args: Prisma.SelectSubset<T, Prisma.JobCreateArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.JobGetPayload<T> | undefined>;
        }
    };
}

export function useCreateManyJob(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.JobCreateManyArgs>) {
    const mutation = request.useModelMutation('Job', 'POST', 'createMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobCreateManyArgs>(args: Prisma.SelectSubset<T, Prisma.JobCreateManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useFindManyJob<T extends Prisma.JobFindManyArgs>(args?: Prisma.SelectSubset<T, Prisma.JobFindManyArgs>, options?: QueryOptions<Array<Prisma.JobGetPayload<T> & { $optimistic?: boolean }>>) {
    return request.useModelQuery('Job', 'findMany', args, options);
}

export function useInfiniteFindManyJob<T extends Prisma.JobFindManyArgs, R extends Array<Prisma.JobGetPayload<T>>>(getNextArgs: GetNextArgs<Prisma.SelectSubset<T, Prisma.JobFindManyArgs> | undefined, R>, options?: InfiniteQueryOptions<Array<Prisma.JobGetPayload<T>>>) {
    return request.useInfiniteModelQuery('Job', 'findMany', getNextArgs, options);
}

export function useFindUniqueJob<T extends Prisma.JobFindUniqueArgs>(args?: Prisma.SelectSubset<T, Prisma.JobFindUniqueArgs>, options?: QueryOptions<Prisma.JobGetPayload<T> & { $optimistic?: boolean }>) {
    return request.useModelQuery('Job', 'findUnique', args, options);
}

export function useFindFirstJob<T extends Prisma.JobFindFirstArgs>(args?: Prisma.SelectSubset<T, Prisma.JobFindFirstArgs>, options?: QueryOptions<Prisma.JobGetPayload<T> & { $optimistic?: boolean }>) {
    return request.useModelQuery('Job', 'findFirst', args, options);
}

export function useUpdateJob(options?: MutationOptions<Prisma.JobGetPayload<Prisma.JobUpdateArgs> | undefined, unknown, Prisma.JobUpdateArgs>) {
    const mutation = request.useModelMutation('Job', 'PUT', 'update', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobUpdateArgs>(args: Prisma.SelectSubset<T, Prisma.JobUpdateArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.JobGetPayload<T> | undefined>;
        }
    };
}

export function useUpdateManyJob(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.JobUpdateManyArgs>) {
    const mutation = request.useModelMutation('Job', 'PUT', 'updateMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobUpdateManyArgs>(args: Prisma.SelectSubset<T, Prisma.JobUpdateManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useUpsertJob(options?: MutationOptions<Prisma.JobGetPayload<Prisma.JobUpsertArgs> | undefined, unknown, Prisma.JobUpsertArgs>) {
    const mutation = request.useModelMutation('Job', 'POST', 'upsert', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobUpsertArgs>(args: Prisma.SelectSubset<T, Prisma.JobUpsertArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.JobGetPayload<T> | undefined>;
        }
    };
}

export function useDeleteJob(options?: MutationOptions<Prisma.JobGetPayload<Prisma.JobDeleteArgs> | undefined, unknown, Prisma.JobDeleteArgs>) {
    const mutation = request.useModelMutation('Job', 'DELETE', 'delete', metadata, options, true);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobDeleteArgs>(args: Prisma.SelectSubset<T, Prisma.JobDeleteArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.JobGetPayload<T> | undefined>;
        }
    };
}

export function useDeleteManyJob(options?: MutationOptions<Prisma.BatchPayload, unknown, Prisma.JobDeleteManyArgs>) {
    const mutation = request.useModelMutation('Job', 'DELETE', 'deleteMany', metadata, options, false);
    return {
        ...mutation,
        trigger: <T extends Prisma.JobDeleteManyArgs>(args: Prisma.SelectSubset<T, Prisma.JobDeleteManyArgs>) => {
            return mutation.trigger(args, options as any) as Promise<Prisma.BatchPayload>;
        }
    };
}

export function useAggregateJob<T extends Prisma.JobAggregateArgs>(args?: Prisma.Subset<T, Prisma.JobAggregateArgs>, options?: QueryOptions<Prisma.GetJobAggregateType<T>>) {
    return request.useModelQuery('Job', 'aggregate', args, options);
}

export function useGroupByJob<T extends Prisma.JobGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.JobGroupByArgs['orderBy'] } : { orderBy?: Prisma.JobGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<T['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<T['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]>(args?: Prisma.SubsetIntersection<T, Prisma.JobGroupByArgs, OrderByArg> & InputErrors, options?: QueryOptions<{} extends InputErrors ?
        Array<PickEnumerable<Prisma.JobGroupByOutputType, T['by']> &
            {
                [P in ((keyof T) & (keyof Prisma.JobGroupByOutputType))]: P extends '_count'
                ? T[P] extends boolean
                ? number
                : Prisma.GetScalarType<T[P], Prisma.JobGroupByOutputType[P]>
                : Prisma.GetScalarType<T[P], Prisma.JobGroupByOutputType[P]>
            }
        > : InputErrors>) {
    return request.useModelQuery('Job', 'groupBy', args, options);
}

export function useCountJob<T extends Prisma.JobCountArgs>(args?: Prisma.Subset<T, Prisma.JobCountArgs>, options?: QueryOptions<T extends { select: any; } ? T['select'] extends true ? number : Prisma.GetScalarType<T['select'], Prisma.JobCountAggregateOutputType> : number>) {
    return request.useModelQuery('Job', 'count', args, options);
}
import type { JobStage } from '@prisma/client';

export function useCheckJob(args: { operation: PolicyCrudKind; where?: { id?: string; entryId?: string; progress?: number; stage?: JobStage; done?: boolean }; }, options?: QueryOptions<boolean>) {
    return request.useModelQuery('Job', 'check', args, options);
}
